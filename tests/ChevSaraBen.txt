# use truncated normal distribution for random delay
fn rand_delay(mean, stddev, min, max) {
  # randnorm has mean: 0 and stddev: 1, so this makes it have mean and stddev from input
  let del = randnorm() * stddev + mean;
  
  # truncate random value according to min and max
  if del < min {
    del = min;
  } else if del > max {
    del = max;
  }
  
  # execute delay
  delay(del);
}

let prev_char_id = -1;
let prev_action_id = -1;

let _execute_action = execute_action;
fn execute_action(char_id number, action_id number, p map) {
  #print(prev_char_id, " ", prev_action_id, " ", char_id, " ", action_id);

  # this next if block handles implict swap or otherwise any pre swap delay specified in this function will not work
  if prev_char_id != char_id && action_id != .action.swap {
    execute_action(char_id, .action.swap, []);
  }

  if action_id == .action.swap {
    # add delay before swap
      # ~3% chance at 6
      # ~7% chance at 20
    rand_delay(14, 4, 6, 20);
  } else if prev_action_id == .action.attack && action_id == .action.attack {
    // no delay
  } else if prev_action_id == .action.attack && action_id == .action.charge {
    // no delay
  } else if prev_action_id == .action.swap && action_id == .action.burst {
    // no delay
  } else if prev_action_id != .action.swap  {
    # add delay before every non-swap
      # ~30% chance at 0
      # 5% chance at 8
    rand_delay(2, 4, 0, 8);
  } else if prev_action_id == .action.swap {
    # add delay after swap to account for repositioning
      # ~16% chance at 6
      # ~16% chance at 18
    rand_delay(12, 6, 6, 18);
  }

  # this here tracks the previous character id so that it can be used above
  prev_char_id = char_id;
  prev_action_id = action_id;
  return _execute_action(char_id, action_id, p);
}

bennett char lvl=90/90 cons=6 talent=9,9,9;
bennett add weapon="alleyflash" refine=1 lvl=90/90;
bennett add set="no" count=4;
bennett add stats hp=4780 atk=311 er=0.518 pyro%=0.466 cr=0.311;
bennett add stats def%=0.062*2 def=19.68*2 hp=253.94*2 hp%=0.0496*2 atk=16.54*2 atk%=0.0496*4 er=0.0551*2 em=19.82*2 cr=0.0331*10 cd=0.0662*12;

chevreuse char lvl=90/90 cons=6 talent=9,9,9;
chevreuse add weapon="favlance" refine=3 lvl=90/90;
chevreuse add set="gt" count=4;
chevreuse add stats hp=4780 atk=311 atk%=0.466 pyro%=0.466 cr=0.311;
chevreuse add stats def%=0.062*2 def=19.68*2 hp=253.94*2 hp%=0.0496*2 atk=16.54*2 atk%=0.0496*2 er=0.0551*7 em=19.82*2 cr=0.0331*10 cd=0.0662*9;

sara char lvl=90/90 cons=6 talent=9,9,9;
sara add weapon="favbow" refine=3 lvl=90/90;
sara add set="esf" count=4;
sara add stats hp=4780 atk=311 atk%=0.466 electro%=0.466 cr=0.311;
sara add stats def%=0.062*2 def=19.68*2 hp=253.94*2 hp%=0.0496*2 atk=16.54*2 atk%=0.0496*4 er=0.0551*2 em=19.82*2 cr=0.0331*10 cd=0.0662*12;

beidou char lvl=90/90 cons=6 talent=9,9,9;
beidou add weapon="tbs" refine=1 lvl=90/90;
beidou add set="esf" count=4;
beidou add stats hp=4780 atk=311 atk%=0.466 electro%=0.466 cr=0.311; 
beidou add stats def%=0.062*2 def=19.68*2 hp=253.94*2 hp%=0.0496*2 atk=16.54*2 atk%=0.0496*2 er=0.0551*4 em=19.82*2 cr=0.0331*10 cd=0.0662*12;

options swap_delay=1 iteration=1000;
target lvl=100 resist=0.1 hp=100000000 pos=0,2.4 radius=2;
target lvl=100 resist=0.1 hp=100000000 pos=2.4,0 radius=1;
target lvl=100 resist=0.1 hp=100000000 pos=-2.4,0 radius=1;
energy every interval=480,720 amount=1;
active beidou;

for let i = 0; i < 5; i = i + 1 {
    bennett burst,skill;
    sara burst;
    beidou skill[counter=2];beidou burst;
    sara attack,skill;
    chevreuse attack,burst,attack,skill[hold=1]:2,attack,skill[hold=1];
    sara attack,walk,aim;
    beidou skill,attack:3;
    sara skill,attack,walk,aim;
    beidou attack:3;
}

# Ben Q E Sara Q Bei E Q Sara N1 E Chev N1 Q N1 hEx2 N1 hE Sara N1w CA Bei E N3 Sara E N1w CA Bei N3
